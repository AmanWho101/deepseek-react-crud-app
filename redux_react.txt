Creating a CRUD (Create, Read, Update, Delete) application using React.js, Redux, and JWT (JSON Web Tokens) for authentication involves several steps. Below is a high-level guide to help you build this application.

1. Setup the Project
    Create a React App:

        bash
        Copy
            npx create-react-app crud-app
            cd crud-app
        Install Required Dependencies:

        bash
        Copy
            npm install react-redux @reduxjs/toolkit react-router-dom axios
2. Set Up Redux
    Create a Redux Store:
    Create a store.js file:

        javascript
        Copy
            import { configureStore } from '@reduxjs/toolkit';
            import authReducer from './features/authSlice';
            import dataReducer from './features/dataSlice';

            export const store = configureStore({
            reducer: {
                auth: authReducer,
                data: dataReducer,
            },
            });
    Create Slices:

    Auth Slice (features/authSlice.js):

        javascript
        Copy
        import { createSlice } from '@reduxjs/toolkit';

        const initialState = {
        user: null,
        token: null,
        isAuthenticated: false,
        };

        const authSlice = createSlice({
        name: 'auth',
        initialState,
        reducers: {
            setCredentials: (state, action) => {
            state.user = action.payload.user;
            state.token = action.payload.token;
            state.isAuthenticated = true;
            },
            logout: (state) => {
            state.user = null;
            state.token = null;
            state.isAuthenticated = false;
            },
        },
        });

        export const { setCredentials, logout } = authSlice.actions;
        export default authSlice.reducer;
    Data Slice (features/dataSlice.js):

        javascript
        Copy
        import { createSlice } from '@reduxjs/toolkit';

        const initialState = {
        items: [],
        };

        const dataSlice = createSlice({
        name: 'data',
        initialState,
        reducers: {
            setItems: (state, action) => {
            state.items = action.payload;
            },
            addItem: (state, action) => {
            state.items.push(action.payload);
            },
            updateItem: (state, action) => {
            const index = state.items.findIndex(item => item.id === action.payload.id);
            if (index !== -1) {
                state.items[index] = action.payload;
            }
            },
            deleteItem: (state, action) => {
            state.items = state.items.filter(item => item.id !== action.payload);
            },
        },
        });

        export const { setItems, addItem, updateItem, deleteItem } = dataSlice.actions;
        export default dataSlice.reducer;
    Wrap the App with Redux Provider:
    Update index.js:

        javascript
        Copy
        import React from 'react';
        import ReactDOM from 'react-dom';
        import { Provider } from 'react-redux';
        import { store } from './store';
        import App from './App';

        ReactDOM.render(
        <Provider store={store}>
            <App />
        </Provider>,
        document.getElementById('root')
        );
3. Set Up JWT Authentication
    Create an API Service:
    Create a services/api.js file:

        javascript
        Copy
        import axios from 'axios';

        const API = axios.create({
        baseURL: 'http://localhost:5000/api', // Your backend URL
        });

        API.interceptors.request.use((config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        return config;
        });

        export default API;
    Auth API Calls:
    Create a services/authService.js file:

        javascript
        Copy
        import API from './api';

        export const login = async (credentials) => {
        const response = await API.post('/auth/login', credentials);
        return response.data;
        };

        export const register = async (userData) => {
        const response = await API.post('/auth/register', userData);
        return response.data;
        };
    Data API Calls:
    Create a services/dataService.js file:

        javascript
        Copy
        import API from './api';

        export const fetchItems = async () => {
        const response = await API.get('/items');
        return response.data;
        };

        export const createItem = async (item) => {
        const response = await API.post('/items', item);
        return response.data;
        };

        export const updateItem = async (id, item) => {
        const response = await API.put(`/items/${id}`, item);
        return response.data;
        };

        export const deleteItem = async (id) => {
        const response = await API.delete(`/items/${id}`);
        return response.data;
        };
4. Create Components
    Login Component:

        javascript
        Copy
        import React, { useState } from 'react';
        import { useDispatch } from 'react-redux';
        import { login } from '../services/authService';
        import { setCredentials } from '../features/authSlice';

        const Login = () => {
        const [email, setEmail] = useState('');
        const [password, setPassword] = useState('');
        const dispatch = useDispatch();

        const handleSubmit = async (e) => {
            e.preventDefault();
            try {
            const { user, token } = await login({ email, password });
            localStorage.setItem('token', token);
            dispatch(setCredentials({ user, token }));
            } catch (error) {
            console.error(error);
            }
        };

        return (
            <form onSubmit={handleSubmit}>
            <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
            <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
            <button type="submit">Login</button>
            </form>
        );
        };

        export default Login;
    CRUD Component:

        javascript
        Copy
        import React, { useEffect } from 'react';
        import { useDispatch, useSelector } from 'react-redux';
        import { fetchItems, createItem, updateItem, deleteItem } from '../services/dataService';
        import { setItems, addItem, updateItem as updateItemAction, deleteItem as deleteItemAction } from '../features/dataSlice';

        const CrudComponent = () => {
        const dispatch = useDispatch();
        const items = useSelector((state) => state.data.items);

        useEffect(() => {
            const getItems = async () => {
            const data = await fetchItems();
            dispatch(setItems(data));
            };
            getItems();
        }, [dispatch]);

        const handleAdd = async () => {
            const newItem = { name: 'New Item' };
            const data = await createItem(newItem);
            dispatch(addItem(data));
        };

        const handleUpdate = async (id) => {
            const updatedItem = { id, name: 'Updated Item' };
            const data = await updateItem(id, updatedItem);
            dispatch(updateItemAction(data));
        };

        const handleDelete = async (id) => {
            await deleteItem(id);
            dispatch(deleteItemAction(id));
        };

        return (
            <div>
            <button onClick={handleAdd}>Add Item</button>
            <ul>
                {items.map((item) => (
                <li key={item.id}>
                    {item.name}
                    <button onClick={() => handleUpdate(item.id)}>Update</button>
                    <button onClick={() => handleDelete(item.id)}>Delete</button>
                </li>
                ))}
            </ul>
            </div>
        );
        };

        export default CrudComponent;
5. Set Up Routing
    Use react-router-dom to handle navigation:

        javascript
        Copy
        import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
        import Login from './components/Login';
        import CrudComponent from './components/CrudComponent';

        function App() {
        return (
            <Router>
            <Routes>
                <Route path="/login" element={<Login />} />
                <Route path="/" element={<CrudComponent />} />
            </Routes>
            </Router>
        );
        }

        export default App;
6. Backend Integration
    Ensure your backend API supports:

    JWT-based authentication (login/register endpoints).

    CRUD operations for your data (e.g., /items endpoints).

7. Run the Application
    Start your React app:

        bash
        Copy
        npm start
        This is a basic implementation. 
        You can expand it by adding error handling, 
        form validation, and more features as needed.



https://view.officeapps.live.com/op/view.aspx?src=
https%3A%2F%2Fwww.mofed.gov.et%2Fmedia%2Ffiler_public
%2F73%2F19%2F73190ce9-f30d-46a8-b571-f53e9b5b5753%2Fnewifmis__3rd_quarter_budget_vs_expenditure__2016
.xlsx&wdOrigin=BROWSELINK